
public class A1A2SLListSwappingDemo {
	static TestSuite theTester;

	/**
	 * 
	 * @param forward
	 *            true if swapping happens left-to-right
	 * @param errorOffset
	 *            0, error free operation, +1 should cause
	 *            IndexOutOfBoundException
	 */
	private static void swapNodeDemo(boolean forward, int errorOffset) {
		SLList<String> mySwapQueue = new SLList<>();

		String[] ordinals = { "Ten", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine" };

		String[] description = { "",
				"Initial info: The 'Ten' is out of logical order when initially added to SLList." };

		for (String string : description) {
			System.out.println(string);
		}
		if (forward)
			System.out.println("  Final info: Each Node has been swapped, starting at 0 and ending at size()-2");
		else
			System.out.println("  Final info: Each Node has been swapped, starting at size()-2 and ending at 0");

		System.out.println();
		for (int j = 0; j < 1; j++) {
			for (int i = 0; i < ordinals.length; i++) {
				String s = ordinals[i];// + (1 - j);
				mySwapQueue.add(s);
			}
		}

		System.out.print("   Node:");
		for (int idx = 0; idx < mySwapQueue.size(); idx++) {
			System.out.printf("%5d ", idx);
		}
		System.out.println();

		System.out.print("Initial: ");
		for (int idx = 0; idx < mySwapQueue.size(); idx++) {
			System.out.printf("%5s ", mySwapQueue.getNode(idx).elementData);
		}

		System.out.println();

		if (forward) {
			for (int i = 0; i < mySwapQueue.size() - 1 + errorOffset; i++) {
				mySwapQueue.swapWithNextNode(mySwapQueue.getNode(i));
			}
		} else {
			for (int i = mySwapQueue.size() - 2 + errorOffset; i >= 0; i--) {
				mySwapQueue.swapWithNextNode(mySwapQueue.getNode(i));
			}
		}

		System.out.print("  Final: ");
		for (int idx = 0; idx < mySwapQueue.size(); idx++) {
			System.out.printf("%5s ", mySwapQueue.getNode(idx).elementData);
		}

		System.out.println();

	}

	public static void main(String[] args) {
		// Are we testing?
		boolean testing = false;

		// Display programmer info and create testing object
		theTester = CommonSuite.commonProgramStart("1", "2a", "Singly-linked List Swap Demo", testing);
		theTester.setSilentRecording(false); // report results immediately

		// Display tasks
		String[] tasksList = { "1. Test link swapping (forward)", "2. Test link swapping (reverse)",
				"3. Test link swapping exceptions generated by invalid indices" };

		int currentTask = 0;

		System.out.println("TASKS:");
		CommonSuite.printlnIndentArray(tasksList);

		// perform the tasks required by the question
		// TASK 1.

		CommonSuite.headerPrint(tasksList, currentTask++);
		swapNodeDemo(true, 0);

		// perform the tasks required by the question
		// TASK 2.

		CommonSuite.headerPrint(tasksList, currentTask++);
		swapNodeDemo(false, 0);

		// perform the tasks required by the question
		// TASK 3.

		CommonSuite.headerPrint(tasksList, currentTask++);
		try {
			swapNodeDemo(true, 1);

		} catch (IndexOutOfBoundsException e) {
			System.out.println("Success. Exception expected. Code performs as expected");
			System.out.println("         " + e);
		}

		CommonSuite.commonProgramEnd(theTester);

	}

}
